import funkin.graphics.FunkinSprite;
import funkin.mobile.ui.FunkinBackButton;
import funkin.modding.PolymodHandler;
import funkin.modding.events.ScriptEvent;
import funkin.modding.module.ScriptedModule;
import funkin.play.PlayState;
import funkin.save.Save;
import funkin.ui.ScriptedMusicBeatSubState;
import funkin.ui.freeplay.FreeplayState;
import funkin.ui.mainmenu.MainMenuState;
import funkin.util.Constants;
import funkin.util.ReflectUtil;

import flixel.FlxG;
import flixel.util.FlxColor;

class ModMenuMain extends ScriptedModule {
    var initCheckState:Bool = false;
    var modMenuButton:FunkinBackButton;
    var config:JsonConfig;

    var configValue:Dynamic = {
        gameplay: {
            controls: {
                keyboard: {
                    up: "W"
                }
            }
        },
        audio: {
            music: 0.001,
            sfx: 0.7
        },
        unlockedSongs: [
            "Tutorial",
            "Bopeebo",
            "Fresh"
        ],
        playerName: "Boyfriend",
        level: -2147483648,
        showHealth: true,
    }

    function new() {
        super("ModMenuMain");

        // Commented these config saves, so when needed for testing config stuff just uncomment it
        //Funkin
        //Save.instance.modOptions.set("modMenu", configValue);

        //JSON Config
        //config = new JsonConfig("modMenu", configValues);
    }

    override function onCreate(event:ScriptEvent) {
        FunkinSprite.cacheTexture(Paths.image("modmenu/default_icon"));
        FunkinSprite.cacheTexture(Paths.image("modmenu/funkin_icon"));
        FunkinSprite.cacheTexture(Paths.image("modmenu/ui/reset"));

        initCheckState = true;
        initButton();
    }

    public function initButton() {
        modMenuButton = new FunkinBackButton(0, 0, FlxColor.WHITE);
        modMenuButton.frames = Paths.getSparrowAtlas("modMenu/modMenuButton");
        modMenuButton.animation.addByIndices('idle', 'idle', [1], "", 24, false);
        modMenuButton.animation.addByIndices('hold', 'press', [0], "", 24, false);
        modMenuButton.animation.addByIndices('confirm', 'idle', [1], "", 48, false);
        modMenuButton.animation.play("idle");
        modMenuButton.updateHitbox();
        modMenuButton.screenCenter();
        modMenuButton.x = FlxG.width - modMenuButton.width - 25;

        // Stupid zIndex to account for
        modMenuButton.zIndex = 100000;

        modMenuButton.onConfirmStart.add(() -> modMenuButton.active = true);

        modMenuButton.onConfirmEnd.add(() -> FlxG.state.openSubState(ScriptedMusicBeatSubState.init("ModMenuSubState")));
    }

    override function onStateChangeEnd(event:StateChangeScriptEvent) {
        /*if (initCheckState) {
            trace(initCheckState);
            FlxG.state.openSubState(ScriptedMusicBeatSubState.init("CheckState"));
        }*/

        if (event.targetState is MainMenuState) {
            var menuState:MainMenuState = event.targetState;

            var prevText = menuState.leftWatermarkText.text;
            var index = prevText.indexOf("Newgrounds:");
            var newText = (index != -1) ? "\n" + prevText.substr(index) : "";
            menuState.leftWatermarkText.text = "Friday Night Funkin' " + Constants.VERSION.substr(1) + newText + "\n" + PolymodHandler.getAllMods().length + " mods Loaded";
            menuState.leftWatermarkText.y -= (index != -1) ? 30 : 15;
        }
    }

    override public function onStateChangeBegin(event:StateChangeScriptEvent) {

    }

    override function onUpdate(event:UpdateScriptEvent) {
        if ((FlxG.state.subState is FreeplayState) || PlayState.instance != null) return;
        if (FlxG.keys.justPressed.TAB) {
            if (PlayState.instance != null) PlayState.instance.pauseMusic();

            var className = ReflectUtil.getAnonymousField(ReflectUtil.getAnonymousField(FlxG.state.subState?._asc, "_c"), "name");
            if (className != "ModMenuSubState" && className != "ModConfigSubState")
                FlxG.state.openSubState(ScriptedMusicBeatSubState.init("ModMenuSubState"));
        }
    }
}

